*config-info*  Configuration Information

==========================================================================================

Configuration Introduction                  *config-intro*

Thank you for taking the time and looking over my neovim configuation,
nvim-forge! 

I hope that you find it helpful in whatever capacity has brought you and
prompted you to read this introduction and help page. If you are having
issues, raise an issue on GitHub and I will do my best to assist you. Just
keep in mind that this is my personal configuration and my attention is often
divided between many different things, this being just one of them. 

Note: Being my personal configuration, this configuration is subject to
radical and unnannounced changes at any given time that radically alter 
its functionality and/or form.



==========================================================================================

Keymaps                *config-keymaps*

- Press `<Space>` to enable and run which-key and a keymap menu will pop up on
the screen that is helpful in learning the keymaps within the editor window.
- Add or Modify keymaps in `lua/core/keymaps.lua` 
  - Additional keymaps can be found in `lua/plugins/which-key.lua`
-------------------------------
|	Normal Mode                 |
-------------------------------

`<C-j>` - Go to upper window 
`<C-k>` -  Go to lower window
`<C-h>` - Go to left window
`<C-l>` - Go to right window
`<C-w>` - Go to next window

`;` - Close window

`<C-Up>` - Add size at the top
`<C-Down>` - Add size at the bottom
`<C-Left>` - Add size at the left
`<C-Right>` - Add size at the right

`H` - Go to previous buffer
`L` - Go to next buffer


`<` - Indent backward
`>` - Indent forward

`A-j` - Move the line up
`A-k` - Move the line down

-------------------------------
|	Insert Mode                 |
-------------------------------

`A-j` - Move the line up
`A-k` - Move the line down

-------------------------------
|	Terminal Mode               |
-------------------------------

`<Esc>` - Enter insert mode

-------------------------------
|	Visual Mode                 |
-------------------------------
`p` - Better Paste

`<` - Indent backward
`>` - Indent forward

`A-j` - Move the selected text up
`A-k` - Move the selected text down

-------------------------------
|	Visual-Block Mode           |
-------------------------------

`A-j` - Move the selected text up
`A-k` - Move the selected text down

-------------------------------
|	Command Mode                |
-------------------------------

`<Tab>` - Word Search Increment
`<S-Tab>` - Word Search Decrement

==========================================================================================

Options              *config-options*

The leader key is `<Space>`.

Default Options:
>
  backup = false
  completeopt = { "menuone", "noselect" }
  conceallevel = 0
  fileencoding = "utf-8"
  hidden = true
  ignorecase = true
  mouse = "a"
  pumheight = 8
  pumblend = 10
  showmode = false
  smartcase = true
  smartindent = true
  splitbelow = true
  splitright = true
  swapfile = true
  timeoutlen = 500
  undofile = true
  updatetime = 100
  writebackup = false
  expandtab = true
  shiftwidth = 2
  tabstop = 2
  cursorline = true
  number = true
  relativenumber = false
  numberwidth = 4
  signcolumn = "yes"
  wrap = true
  scrolloff = 8
  sidescrolloff = 8
  lazyredraw = true
  termguicolors = true
  fillchars = { eob = " " }
<
These options can be found and modified within the file located at `lua/core/options.lua`. 

==========================================================================================

Snippets              *config-snippets*

- Read `:h luasnip-snippets` for guides

To edit the snippet for the current filetype, run `:LuaSnipEdit`

==========================================================================================

Themes                *config-themes*

----------------------------
|     Available Themes     |
----------------------------

Unlike most other NeoVim configurations, I am not very interested
at present in colorschemes in my code editor. My overall environment 
is monochromatic at present and were syntax highlighting not extremely 
helpful, I would probably have moved to the same here. Nonetheless,
included in this configuration are a few themes that can easily be
utilized at the user's pleasure: 

* nightfly 
* vscode.nvim
* onedark.nvim
* onenord.nvim
* dracula.nvim
* vim-nightfly-colors


Add colorscheme:

1. Go to `lua/plugins/colorscheme.lua`.
2. Add the colorscheme.
Example:
>
  {
    "Alexis12119/nightly.nvim",
    lazy = true,
  },

3. Install it by running `:Lazy install`
<
Change colorscheme:

- Make sure the colorscheme you want to use is installed.
1. Change the colorscheme name in `lua/theme/init.lua`.

Example:

>
 M.name = "nightly"
<

2. Restart neovim to take effect

==========================================================================================

Plugins             *Plugins*

Add Plugin                  *config-add-plugin*

If the plugin is a dependency of other plugin, then add it to `dependencies`.

Example:
>
  {
   "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-buffer", 
      -- other dependencies
      },
  }
<

If the plugins isn't another plugin's dependency then follow the instructions below.

1. Create a plugin configuration on `lua/plugins/<plugin-name>.lua`
2. Put the plugin configuration in the file you created. 
Example:
>
  return {
    {
      "rcarriga/nvim-notify",
      config  = function()
	-- plugin configuration
      end,
    },
  }
<
3. Then run `:Lazy install`.

Remove Plugin               *config-remove-plugin*

1. Either delete the file or comment the plugin configuration

Example:
>
  return {
    -- {
    --  "rcarriga/nvim-notify",
    --  config = function()
    --  -- plugin configuration
    --  end,
    -- },
  }
<
2. Then run `:Lazy clean`.

As you can see, this method of plugin administration enabled by Lazy.nvim 
cuts out the need for separately maintained lists of plugins and plugin 
configuration files that is typical of other NeoVim package managers, 
which was what prompted the latest refactoring of this configuration to
utilize it.  

==========================================================================================

Tips        *config-tips*

-------------------
| `:checkhealth`  |
-------------------

 If you are having issues with getting your NeoVim running or its running
 suboptimally, the first thing to do is run `:checkhealth` to check if 
 there's a problem with your environment, be it internal to your configuration
 or related to an expected but absent external package (such as python's
 pynvim package or the ruby gem for neovim, etc).

------------
|  Reload  |
------------

Running `:Reload` will do precisely that, it will reload the core files of
this configuration to account for changes in those files exclusively. This is
helpful if changing options settings and seeing the changes reflected in the
same session as they were changed. 

---------------------------
|  Toggling FormatOnSave  |
---------------------------

If upon saving a file, you are mortified by the file becoming scrambled by the
default formatter for that filetype, you can easily toggle the feature
responsible with `:FormatOnSaveToggle`

-------------------------------
|  Restoring Builtin Plugins  |
-------------------------------

If you want to enable the disabled builtin plugins. Comment them out in Lua's 
comment syntax with "--" as in the example below.

Example:
>
  disabled_plugins = {
        -- "gzip",
        -- "matchit",
        -- "matchparen",
        -- "netrwPlugin",
        -- "tarPlugin",
        -- "tohtml",
        -- "tutor",
        -- "zipPlugin",
      },
<

This is located in `lua/plugin-loader.lua` if you feel the need to comment it
out. 

---------------
|  Clipboard  |
---------------

Read `:help clipboard` for help regarding issues with the clipboard.

-------------------------------
|  Statusline Personalization | 
-------------------------------

You can change the statusline components by editing `lua/plugins/lualine/default.lua`.

---------------
|  Lua-Guide  |
---------------

https://github.com/nanotee/nvim-lua-guide (It's now archived but still helpful)

or

`:help lua-guide`

-------------------
| Vim Cheatsheet  |
-------------------

This is a wonderful cheatsheet that you can use to improve your vim/neovim skills and knowledge
of the basic functionality of the editor using its default keymaps.

https://vim.rtorr.com/


vim:noet:tw=78:ts=8:ft=help:norl:
